// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "mongodb"
//   url      = env("DATABASE_URL")
// }
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String               @id @default(cuid())
  name                String?
  email               String?              @unique
  emailVerified       DateTime?
  image               String?
  title               String?
  aboutMe             String?              @db.Text
  lastRefreshed       DateTime?
  createdAt           DateTime             @default(now())
  accounts            Account[]
  sessions            Session[]
  blogs               Blog[]
  cloudinaryTempFiles CloudinaryTempFile[]
  followers           Follow[]             @relation("follower")
  followings          Follow[]             @relation("following")
  Comments            Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Blog {
  id              String    @id @default(uuid()) @db.Uuid
  postBy          String
  user            User      @relation(fields: [postBy], references: [id], onDelete: Cascade)
  title           String
  tags            String[]
  brief           String    @db.Text
  content         String    @db.Text
  renderedContent String?   @db.Text
  showedCount     Int       @default(0)
  published       Boolean   @default(false)
  publishedDate   DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now())
  Images          Image[]
  Likes           Like[]
  Comments        Comment[]

  @@index([postBy, createdAt(sort: Desc), published])
  @@index([createdAt(sort: Desc), published])
  @@index([showedCount, createdAt(sort: Desc), published])
}

model Image {
  id     String  @id @default(uuid()) @db.Uuid
  url    String
  alt    String?
  blog   Blog    @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId String  @db.Uuid

  @@index([blogId])
}

model Comment {
  id          String        @id @default(uuid()) @db.Uuid
  content     String        @db.Text
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  postBy      String
  user        User          @relation(fields: [postBy], references: [id], onDelete: Cascade)
  blog        Blog          @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId      String        @db.Uuid
  parentId    String?       @db.Uuid
  parent      Comment?      @relation("ChildComments", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children    Comment[]     @relation("ChildComments")
  CommentLike CommentLike[]

  @@index([blogId, createdAt(sort: Desc)])
  @@index([parentId])
  @@map("comments")
}

model Like {
  id     BigInt @id @default(autoincrement())
  blogId String @db.Uuid
  blog   Blog   @relation(fields: [blogId], references: [id], onDelete: Cascade)
  // comment Comment @relation(fields: [likedId], references: [id], onDelete: Cascade)
  userId String

  @@unique([blogId, userId])
  @@index([blogId])
}

model CommentLike {
  id        BigInt  @id @default(autoincrement())
  commentId String  @db.Uuid
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  // comment Comment @relation(fields: [likedId], references: [id], onDelete: Cascade)
  userId    String

  @@unique([commentId, userId])
  @@index([commentId])
}

model CloudinaryTempFile {
  id        Int      @id @default(autoincrement())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  imgUrl    String
  createdAt DateTime @default(now())

  @@index([userId])
}

model Follow {
  id          BigInt   @id @default(autoincrement())
  followerId  String
  follower    User     @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followingId String
  following   User     @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
  @@index([followingId])
  @@index([followerId])
}
