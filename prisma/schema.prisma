// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  name               String?
  email              String?              @unique
  emailVerified      DateTime?
  image              String?
  title              String?
  aboutMe            String?
  accounts           Account[]
  sessions           Session[]
  blog               Blog[]
  cloudinaryTempFile CloudinaryTempFile[]
  follower           Follow[]             @relation("follower")
  followings         Follow[]             @relation("following")

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Blog {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  postBy          String   @db.ObjectId
  user            User     @relation(fields: [postBy], references: [id], onDelete: Cascade)
  title           String
  luckyDigit      Int
  brief           String
  content         String
  renderedContent String
  images          String[] @default([])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())

  @@map("blogs")
}

model Like {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  blogId String @db.ObjectId
  userId String @db.ObjectId

  @@unique([blogId, userId])
  @@map("likes")
}

model CloudinaryTempFile {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  imgUrl    String
  createdAt DateTime @default(now())

  @@map("cloudinarytempfiles")
}

model Follow {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  followerId  String   @db.ObjectId
  follower    User     @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followingId String   @db.ObjectId
  following   User     @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
  @@map("follows")
}
